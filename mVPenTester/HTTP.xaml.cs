using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace mVPenTester
{
    /// <summary>
    /// Interaction logic for HTTP.xaml
    /// </summary>
    public partial class HTTP : Window
    {
        public const string PIERCE_DLL = @"..\..\..\Debug\BufferOF.dll";
        public HTTP()
        {
            InitializeComponent();
        }
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
                DragMove();
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private void maximumMin_Click(object sender, RoutedEventArgs e)
        {
            WindowState = (WindowState == WindowState.Normal) ?
                WindowState = WindowState.Maximized : WindowState = WindowState.Normal;
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        [DllImport(PIERCE_DLL, CallingConvention = CallingConvention.Cdecl)]
        private static extern void HTTPRequest(StringBuilder ip, int port, StringBuilder result,
            StringBuilder httprequest, StringBuilder result1, StringBuilder finalRequestRes);
        private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
            string[] inputVal = ipInput.Text.Split(':');
            StringBuilder ip = new StringBuilder(inputVal[0]);
            int port = int.Parse(inputVal[1]);

            StringBuilder result = new StringBuilder();

            StringBuilder httpRequest = new StringBuilder(inputField.Text);
            StringBuilder result1 = new StringBuilder();

            StringBuilder final = new StringBuilder();

            await Task.Run(() => HTTPRequest(ip, port, result, httpRequest, result1, final));

            outputField.Text = $"Result: {result.ToString()}\n{result1.ToString()}\n===========\n{final.ToString()}";
        }
    }
}
