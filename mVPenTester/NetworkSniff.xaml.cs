using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using SharpPcap;
using System.Windows.Controls;
using System.Windows.Media;
using System.Security.Principal;
using Microsoft.Win32;
using System.Text;

namespace mVPenTester
{
    /// <summary>
    /// Interaction logic for SqliWindow.xaml
    /// </summary>
    public enum Protocol
    {
        TCP = 6,
        UDP = 17,
        Unknown = -1
    };
    public partial class NetworkSniff : Window
    {
        TextBoxHistory hist = new TextBoxHistory();

        List<Monitor> monitorList = new List<Monitor>();
        List<Packet> pList = new List<Packet>();
        List<Packet> allList = new List<Packet>();
        
        long totalLength = 0;
        long totalCount = 0;
        public bool isCollapsed = false;
        delegate void refresh(Packet p);
        public NetworkSniff()
        {
            InitializeComponent();
            this.MaxHeight = SystemParameters.MaximizedPrimaryScreenHeight;
            SetIP.IPAddress = null;
            networkSniffConsole.Text = $"---Welcome to the Network Sniffer! Type help to get started!---{Environment.NewLine}REMINDER: In order for this application" +
                $" to function you must be running as administrator";
            if (isAdmin())
                networkSniffConsole.AppendText(Environment.NewLine+"Status: Running in administrator...");
            else
                networkSniffConsole.AppendText(Environment.NewLine+"Status: You are not running as administrator!");
            networkSniffConsole.AppendText(Environment.NewLine + "> ");
            lblInfo.Text = "Status: Idle...";
            ResizeHeaders();
        }
        private void ResizeHeaders()
        {
            double aW = monitorListView.ActualWidth;
            sourceIPHeader.Width = aW / 8;
            sourcePortHeader.Width = aW / 8;
            destinationIPHeader.Width = aW / 8;
            destinationPortHeader.Width = aW / 8;
            protocolHeader.Width = aW / 8;
            TimeHeader.Width = aW / 8;
            LengthHeader.Width = aW / 8;
            charInfoHeader.Width = aW / 8;
        }
        public static bool isAdmin()
        {
            var identity = WindowsIdentity.GetCurrent();
            var principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
        private void maximumMin_Click(object sender, RoutedEventArgs e)
        {
            WindowState = (WindowState == WindowState.Normal) ? WindowState = WindowState.Maximized : WindowState = WindowState.Normal;
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }
        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left && e.ClickCount == 2)
            {
                WindowState = WindowState.Normal;
            }
            if (e.ChangedButton == MouseButton.Left)
                DragMove();
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            this.BorderThickness = (WindowState == WindowState.Maximized) ? this.BorderThickness = new System.Windows.Thickness(6)
               : this.BorderThickness = new System.Windows.Thickness(0);
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
            ResizeHeaders();
        }
        private void sqlURL_KeyDown(object sender, KeyEventArgs e)
        {
            string[] lines = networkSniffConsole.Text.Split('\n');
            string lastLine = lines[lines.Length - 1];
            string[] command = lastLine.Split('>');
            try
            {
                string[] args = command[1].Split(' ');
                if (e.Key == Key.Enter)
                {
                    try
                    {
                        if (args.Length <= 2)
                        {
                            if (String.IsNullOrWhiteSpace(command[1])) {
                                TextBoxMessage bx = new TextBoxMessage(networkSniffConsole);
                                bx.EmptyEntry();
                            }
                            else {
                                string ah = command[1].ToLower().TrimStart();
                                switch (ah)
                                {
                                    case "help":
                                        StringBuilder sb = new StringBuilder();
                                        sb.AppendLine("===List of commands===");
                                        sb.AppendLine("\t-- help -- shows a list of commands");
                                        sb.AppendLine("\t-- clear -- clears console");
                                        sb.AppendLine("\t-- listdevices -- lists all devices and information");
                                        sb.AppendLine("\t-- clearlist -- clears network monitor list");
                                        sb.AppendLine("\t-- filter [condition] -- filter the monitor list with given condition");
                                        sb.AppendLine("\t-- save -- saves current monitor progress as MVPCAP file");
                                        SendTXTBoxMsg(sb.ToString());
                                        hist.AddToHistory(command[1]);
                                        break;
                                    case "clear":
                                        networkSniffConsole.Text = "> ";
                                        networkSniffConsole.SelectionStart = networkSniffConsole.Text.Length;
                                        networkSniffConsole.SelectionLength = 0;
                                        hist.ClearHistory();
                                        break;
                                    case "save":
                                        SaveFileAsMVPCAP();
                                        break;
                                    case "listdevices":
                                        hist.AddToHistory(command[1]);
                                        Task.Run(() => NetSniff());
                                        break;
                                    case "clearlist":
                                        try{
                                            hist.AddToHistory(command[1]);
                                            SendTXTBoxMsg("Monitor list has been cleared...");
                                            monitorListView.Items.Clear();
                                            lblInfo.Text = "Status Idle...";
                                        }
                                        catch (Exception ex){
                                            SendTXTBoxMsg(ex.Message);
                                        }
                                        break;
                                    default:
                                        hist.AddToHistory(command[1]);
                                        SendTXTBoxMsg($"Error: Unknown command '{command[1].TrimStart()}'. Type help for a list of commands");
                                        break;
                                }
                            }
                        }
                        else
                        {
                            if (String.IsNullOrWhiteSpace(command[1]))
                            {
                                TextBoxMessage bx = new TextBoxMessage(networkSniffConsole);
                                bx.EmptyEntry();
                            }
                            else
                            {
                                if (command[1].ToLower().StartsWith(" filter"))
                                {
                                    hist.AddToHistory(command[1]);
                                    showIPPackets(filterTxt(args[2]));
                                    SendTXTBoxMsg($"Filtering: {args[2]}...");
                                }
                                else
                                {
                                   hist.AddToHistory(command[1]);
                                   SendTXTBoxMsg($"Error: Unknown command '{command[1].TrimStart()}'. Type help for a list of commands");
                                }
                            }
                        }
                    }
                    catch (Exception et)
                    { SendTXTBoxMsg(et.ToString()); }
                }
                else if (e.Key == Key.F1)
                    hist.TraverseUp(networkSniffConsole, ">");
                else if (e.Key == Key.F2)
                    hist.TraverseDown(networkSniffConsole, ">");
            }
            catch { }
        }
        public void SendTXTBoxMsg(string msg)
        {
            networkSniffConsole.Text = networkSniffConsole.Text + Environment.NewLine;
            networkSniffConsole.Text += "\r" + msg + "\r\n" + Environment.NewLine;
            networkSniffConsole.Text += "> ";
            networkSniffConsole.SelectionStart = networkSniffConsole.Text.Length;
            networkSniffConsole.SelectionLength = 0;
            networkSniffConsole.ScrollToEnd();
        }
        public void SendTXTBox(string msg)
        {
            networkSniffConsole.Text = networkSniffConsole.Text;
            networkSniffConsole.Text += "\r" + msg + Environment.NewLine;
            networkSniffConsole.SelectionStart = networkSniffConsole.Text.Length;
            networkSniffConsole.SelectionLength = 0;
            networkSniffConsole.ScrollToEnd();
        }
        public void NetSniff()
        {
            var devices = CaptureDeviceList.Instance;
            string a = "=== List of devices ===" + Environment.NewLine;
            foreach (var dev in devices)
                a += dev.ToString();
            Dispatcher.Invoke(() => 
            SendTXTBoxMsg(a));
        }
        public void ListAddress()
        {
            string strIP = null;

            IPHostEntry hostEntry = Dns.GetHostEntry(Dns.GetHostName());
            if (hostEntry.AddressList.Length > 0)
            {
                foreach (IPAddress ip in hostEntry.AddressList)
                {
                    strIP = ip.ToString();
                    Button txtip = new Button()
                    {
                        Height = 20,
                        Content = strIP,
                        Foreground = Brushes.White,
                        Background = new SolidColorBrush(Color.FromArgb(255,50,50,50))
                    };
                    txtip.Margin = new Thickness(2,4,6,6);
                    txtip.Click += Txtip_Click;
                    stackAdress.Children.Add(txtip);
                }
            }
        }
        private void Txtip_Click(object sender, RoutedEventArgs e)
        {
            var keyword = (e.Source as Button).Content.ToString();
            MessageBox.Show(keyword);
            SetIP.IPAddress = keyword;
        }
        private void addAndUpdatePackets(Packet p)
        {
            totalCount++;
            totalLength += p.TotalLength;
            allList.Add(p);
            pList.Add(p);
            monitorListView.Items.Add(new IPInfo
            {
                src_IP = p.Src_IP,
                src_PORT = p.Src_PORT,
                dest_IP = p.Des_IP,
                dest_Port = p.Des_PORT,
                Type = p.Type,
                Time = p.Time,
                TotalLength = p.TotalLength.ToString(),
                charInfo = p.getCharString()
            });
        }
        private void startRanking()
        {
            monitorList.Clear();
            IPAddress[] hosts = Dns.GetHostEntry(Dns.GetHostName()).AddressList;
            if (hosts == null || hosts.Length == 0)
            {
                SendTXTBoxMsg("Error: No hosts detected, please check your network!");
            }
            for (int i = 0; i < hosts.Length; i++)
            {
                Monitor monitor = new Monitor(hosts[i]);
                monitor.newPacketEventHandler += new Monitor.NewPacketEventHandler(onNewPacket);
                monitorList.Add(monitor);
            }
            foreach (Monitor monitor in monitorList)
            {
                monitor.start();
            }
        }
        private void SaveFileAsMVPCAP()
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog() 
            {
                Filter = "ALL MVPCAP | *.mvpcap"
            };
            if (saveFileDialog.ShowDialog() == true) {
                StringBuilder writeToFile = new StringBuilder();
                foreach (IPInfo gh in monitorListView.Items) {
                    writeToFile.AppendLine($"{gh.src_IP}\t{gh.src_PORT}\t{gh.dest_IP}" +
                        $"{gh.dest_Port}\t{gh.Type}\t{gh.Time}\t{gh.TotalLength}\t{gh.charInfo}");
                }
                File.WriteAllText(saveFileDialog.FileName,writeToFile.ToString());
                SendTXTBoxMsg($"Successfully saved file {saveFileDialog.FileName}");
            }
        }
        private void onNewPacket(Monitor monitor, Packet p)
        {
            monitorListView.Dispatcher.Invoke(new refresh(onRefresh), p);
        }
        private void onRefresh(Packet p)
        {
            bool placeHolder = false;
            if (placeHolder) //((bool)filterCheckBox.IsChecked)
            {

            }
            else
            {
                addAndUpdatePackets(p);
            }
            if (totalLength < 10 * 1024)
                lblInfo.Text = string.Format("Packets received: {0}  Total length： [{1} bytes]", totalCount, totalLength);
            else if (totalLength < 10 * 1024 * 1024)
                lblInfo.Text = string.Format("Packets received: {0}  Total length： [{1} KB]", totalCount, totalLength / 1024);
            else if (totalLength < 1024 * 1024 * 1024)
                lblInfo.Text = string.Format("Packets received: {0}  Total length： [{1} MB]", totalCount, totalLength / (1024 * 1024));
            else if (totalLength < (long)1024 * 1024 * 1024 * 2)
                lblInfo.Text = string.Format("Packets received: {0}  Total length： [{1} GB]", totalCount, totalLength / (1024 * 1024 * 1024));
            else
            {
                totalCount = 0;
                totalLength = 0;
                monitorListView.Items.Clear();
                allList.Clear();
                lblInfo.Text = string.Format("Packets received {0}  Total length： [{1} bytes]", 0, 0);
            }
        }
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            ListAddress();
        }
        private void startExec_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                startRanking();
                SendTXTBoxMsg("Sniffing started...");
            }
            catch
            {
                SendTXTBoxMsg("Error: There was an error with running the process. Try running as administrator and try again...");
            }
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            foreach (Monitor monitor in monitorList)
            {
                monitor.stop();
            }
        }
        private void stopExec_Click(object sender, RoutedEventArgs e)
        {
            foreach (Monitor monitor in monitorList)
            {
                monitor.stop();
            }
            SendTXTBoxMsg("Sniffing ended...");
        }
        private void monitorListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                Packet p = pList[monitorListView.SelectedIndex];
                hexTxt.Text = p.getHexString();
                charTxt.Text = p.getCharString();
            }
            catch {
                hexTxt.Clear();
                charTxt.Clear() ;
            }
        }
        private void CollapseBtn_Click(object sender, RoutedEventArgs e)
        {
            splitter.Height = (isCollapsed) ? new GridLength(150, GridUnitType.Pixel) : new GridLength(0);
            CollapseBtn.Content = isCollapsed ? "▼" : "▲";
            isCollapsed = (!isCollapsed);
            gridSplitter.Visibility = (isCollapsed) ? Visibility.Collapsed: Visibility.Visible;
        }
        private bool isValidIP(Packet p, string ip)
        {
            return ip == "" || p.Src_IP == ip || p.Des_IP == ip;
        }
        private bool isValidPort(Packet p, string port)
        {
            return port == "" || p.Src_PORT == port || p.Des_PORT == port;
        }
        private bool isValidProtocol(Packet p, string protocol)
        {
            return protocol == "" || p.Type == protocol;
        }
        private void showIPPackets(string[] conditions)
        {
            string ipString = conditions[0];
            string port = conditions[1];
            string type = conditions[2];
            Packet p;
            monitorListView.Items.Clear();
            pList.Clear();
            for (int i = 0; i < allList.Count; i++)
            {
                p = allList[i];
                if (isValidIP(p, conditions[0]) && isValidPort(p, conditions[1])
                    && (conditions[2] == "" || conditions[2] == p.Type))
                {
                    pList.Add(p);
                    monitorListView.Items.Add(new IPInfo
                    {
                        src_IP = p.Src_IP,
                        src_PORT = p.Src_PORT,
                        dest_IP = p.Des_IP,
                        dest_Port = p.Des_PORT,
                        Type = p.Type,
                        Time = p.Time,
                        TotalLength = p.TotalLength.ToString(),
                        charInfo = p.getCharString()
                    });
                }
            }
        }
        private string[] filterTxt(string txt)
        {
            string[] conditions = { "", "", ""};
            string tmpString = txt;
            int port = 0;
            
            if (tmpString.Contains("/") || tmpString.Contains(":"))//IP:PORT OR IP/PORT
            {
                string[] arr = { null, null };
                if (tmpString.Contains("/"))
                    arr = tmpString.Split(new char[] { '/' });
                else
                    arr = tmpString.Split(new char[] { ':' });
                conditions[0] = arr[0];
                conditions[1] = arr[1];
            }
            else if (int.TryParse(tmpString, out port))//just port;
                conditions[1] = port.ToString();
            else//just IP;
                conditions[0] = tmpString;
            return conditions;
        }
        private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
           showIPPackets(filterTxt(filterTxtBox.Text));
        }
        private void GridSplitter_DragCompleted(object sender, System.Windows.Controls.Primitives.DragCompletedEventArgs e)
        {
            ResizeHeaders();
        }
    }
    public class SetIP
    {
        public static string IPAddress { get; set; }
    }
    public class IPInfo
    {
        public string src_IP { get; set; }
        public string src_PORT { get; set; }
        public string dest_IP { get; set; }
        public string dest_Port { get; set; }
        public string Type { get; set; }
        public string Time { get; set; }
        public string TotalLength { get; set; }
        public string charInfo { get; set; }
    }
}
