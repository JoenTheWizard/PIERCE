using System;
using System.Diagnostics;
using System.Net;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using SharpPcap;
using TempMail;
using ICSharpCode.Decompiler;
using ICSharpCode.Decompiler.CSharp;
using System.Threading;
using System.Text;
using System.Linq;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Cryptography;
using Renci.SshNet;
using System.Net.Sockets;
using System.IO;
using System.Collections.Generic;
using FFMpegCore;
using FFMpegCore.Exceptions;
using DnsClient;
using System.Runtime.InteropServices;
using System.Net.Http;
using System.Drawing;
using System.Windows.Threading;
using Newtonsoft.Json.Linq;

namespace mVPenTester
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        TextBoxMessage txbx;
        TextBoxHistory history;
        #region Encryption
        MD5 md5;
        SHA1 sha1;
        public string CURRENT_DIRECTORY;
        #endregion
        #region SSH
        public ConnectionInfo newConnection;
        public SshClient newSSHClient;
        public bool isConnectedToSSH;
        //DLL C++
        public const string PIERCE_DLL = @"..\..\..\Debug\BufferOF.dll";
        #endregion
        public MainWindow()
        {
            SplashScreen sc = new SplashScreen();
            sc.Show();
            Thread.Sleep(3000);
            sc.Hide();
            InitializeComponent();
            this.MaxHeight = SystemParameters.MaximizedPrimaryScreenHeight;
        }
        [DllImport(PIERCE_DLL, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Adds(int a, int b);
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            txbx = new TextBoxMessage(textBox);
            history = new TextBoxHistory();
            md5 = new MD5CryptoServiceProvider();
            sha1 = new SHA1CryptoServiceProvider();
            CURRENT_DIRECTORY = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            isConnectedToSSH = false;

            textBox.Text = "===Welcome to PIERCE," +
                " a multipurpose penetration testing tool===" 
                +"\r\nVisit our website: https://joenthewizard.github.io/pierce-project-website/" +
                Environment.NewLine + "REMINDER: In order for most functions to work you must be connected to the internet."
                + Environment.NewLine + CURRENT_DIRECTORY+"> ";
        }
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            WindowState = (WindowState == WindowState.Normal) ? WindowState = WindowState.Maximized : WindowState = WindowState.Normal;
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }
        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            this.BorderThickness = (WindowState == WindowState.Maximized) ? this.BorderThickness = new System.Windows.Thickness(7)
                : this.BorderThickness = new System.Windows.Thickness(0);
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
                DragMove();
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private string HelpPIERCE()
        {
            StringBuilder helpCmd = new StringBuilder();
            helpCmd.AppendLine("===List of commands===");
            helpCmd.AppendLine("\t-- help - shows a list of commands");
            helpCmd.AppendLine("\t-- clear - clears console");
            helpCmd.AppendLine("\t-- ls/dir - list directory");
            helpCmd.AppendLine("\t-- cd [directory] - sets current directory");
            helpCmd.AppendLine("\t-- listdevice - lists all devices connected to network");
            helpCmd.AppendLine("\t-- tempmail [--create/-c] [amount*] - temp mail service");
            helpCmd.AppendLine("\t-- decompile [path] - decompiles .NET assembly of a given path (there must be no spaces in directory)");
            helpCmd.AppendLine("\t-- dns [dns] -- obtains IP address from a given  DNS");
            helpCmd.AppendLine("\t-- ssh [host-ip || '--connnect'] [port] [username] [password] [command] -- executes command to remote SSH server");
            helpCmd.AppendLine("\t-- jwt [token] -- decodes given JWT token");
            helpCmd.AppendLine("\t-- capture -- captures packets in network (STILL UNDER DEVELOPMENT)");
            helpCmd.AppendLine("\t-- keyssh [--gen-rsa] [key-size] [comment] -- generates SSH RSA encrypted key");
            helpCmd.AppendLine("\t-- port ['--scan'/'-sc' [ip] [startport] [endport]] -- check port info");
            helpCmd.AppendLine("\t-- subnetaddress [cidr] -- calculates subnet address from given netmask");
            helpCmd.AppendLine("\t-- filefry [find] [replace] [frequency] [start] [directory] -- corrupts/fries given file");
            helpCmd.AppendLine("\t-- ffmpeg [-i] [file-path] -- executes ffmpeg related commands");
            helpCmd.AppendLine("\t-- stego [-t/-e] [path-to-image] [-p/-sp]* [text-stream] -- steganography tool to hide or extract data from images (only with PNGs and BMPs)");
            helpCmd.AppendLine("\t-- sendhttp [--post/-p] [key=val,...] [url] -- sends HTTP requests and retrives response");
            helpCmd.AppendLine("\t-- gethttp [url] -- gets HTTP response");
            helpCmd.AppendLine("\t-- http-request -- opens repeater, send individual HTTP requests for analysis");
            helpCmd.AppendLine("\t-- tor -- opens Tor Browser window");
            helpCmd.AppendLine("\t-- hexedit -- opens Hex Editor window");
            helpCmd.AppendLine("\t-- networksniffer/nwsf -- opens Network Sniffer window");
            return helpCmd.ToString();
        }
        private string HelpPierceSSH()
        {
            StringBuilder helpSSHCmd = new StringBuilder();
            helpSSHCmd.AppendLine("\t-- pierce-help - shows list of PIERCE related commands");
            helpSSHCmd.AppendLine("\t-- clear - clear console");
            helpSSHCmd.AppendLine("\t-- pierce-sftp [file-directory] [ssh-server-directory]* - sends file to SSH server");
            helpSSHCmd.AppendLine("\t-- pierce-edit [file-directory] - edits file from SSH server");
            helpSSHCmd.AppendLine("\t-- exit - exit SSH server");
            return helpSSHCmd.ToString();
        }
        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            Bruteforce b = new Bruteforce();
            b.Show();
        }
        private async Task PortScan(string ip, string portStart, string portEnd)
        {
            await Task.Run(() =>
            {
                for (int s = Convert.ToInt32(portStart); s <= Convert.ToInt32(portEnd); s++)
                {
                    using (TcpClient scanner = new TcpClient())
                    {
                        try {
                            scanner.Connect(ip, s);
                            Dispatcher.Invoke(() => SendTXTA($"{ip}:{s} | OPEN"));
                        } catch (SocketException e) {
                            Dispatcher.Invoke(() => SendTXTA($"{ip}:{s} | CLOSED"));
                        }
                    }
                }
            });
            SendTXTBoxMsg("");
        }
        private async void CreateTempMail(int amount)
        {
            textBox.IsReadOnly = true;
            SendTXTA("Creating temporary email... please wait...");
            await TemporaryEmailDemo(amount);
            textBox.IsReadOnly = false;
        }
        [DllImport(PIERCE_DLL, CallingConvention = CallingConvention.Cdecl)]
        private static extern void __GetValue__(StringBuilder str, int strlen);
        [DllImport(PIERCE_DLL, CallingConvention = CallingConvention.Cdecl)]
        private static extern void ParseStringTest(StringBuilder st);
        [DllImport(PIERCE_DLL, CallingConvention = CallingConvention.Cdecl)]
        private static extern void AsioInit(StringBuilder ip, int port, StringBuilder result);
        [Obsolete]
        private async void TextBox_KeyDown(object sender, KeyEventArgs e)
        {
            string[] lines = textBox.Text.Split('\n');
            string lastLine = lines[lines.Length - 1];
            string[] command = lastLine.Split('>');
            try
            {
                string[] args = command[1].Split(' ');
                if (e.Key == Key.Enter)
                {
                    if (!isConnectedToSSH)
                    {
                        try
                        {
                            if (args.Length <= 2)
                            {
                                if (String.IsNullOrWhiteSpace(command[1]))
                                    txbx.EmptyEntry(CURRENT_DIRECTORY);
                                else
                                {
                                    string trm = command[1].TrimStart().ToLower();
                                    switch (trm)
                                    {
                                        case "help":
                                            history.AddToHistory(command[1]);
                                            SendTXTBoxMsg(HelpPIERCE(), command);
                                            break;
                                        case "clear":
                                            history.AddToHistory(command[1]);
                                            textBox.Text = CURRENT_DIRECTORY + "> ";
                                            textBox.SelectionStart = textBox.Text.Length;
                                            textBox.SelectionLength = 0;
                                            break;
                                        case "ipconfig":
                                            history.AddToHistory(command[1]);
                                            DisplayTCP();
                                            break;
                                        case "listdevice":
                                            history.AddToHistory(command[1]);
                                            NetworkSniff();
                                            break;
                                        case "cmd":
                                            history.AddToHistory(command[1]);
                                            Process cmd = new Process();
                                            cmd.StartInfo.FileName = "cmd.exe";
                                            cmd.Start();
                                            txbx.EmptyEntry(CURRENT_DIRECTORY);
                                            break;
                                        case "string_test": //delete
                                            StringBuilder str = new StringBuilder(2048);
                                            await Task.Run(() => __GetValue__(str, 2048));
                                            SendTXTBoxMsg(str.ToString());
                                            StringBuilder sba = new StringBuilder(2048);
                                            sba.Append("test lol eckers lol epic man is here with da balls lol aaa");
                                            ParseStringTest(sba);
                                            SendTXTBoxMsg(sba.ToString());
                                            break;
                                        case "capture":
                                            history.AddToHistory(command[1]);
                                            CapturingPackets();
                                            break;
                                        case "close":
                                        case "exit":
                                            history.AddToHistory(command[1]);
                                            Close();
                                            break;
                                        case "history":
                                            StringBuilder sb = new StringBuilder();
                                            for (int i = 0; i < history.history.Count; i++)
                                                sb.AppendLine($"{i+1}. {history.history[i].TrimStart()}");
                                            SendTXTBoxMsg(sb.ToString());
                                            history.AddToHistory(command[1]);
                                            break;
                                        case "ls":
                                        case "dir":
                                            history.AddToHistory(command[1]);
                                            DisplayDir(CURRENT_DIRECTORY);
                                            break;
                                        case "tor":
                                            await Task.Run(() => {
                                                Dispatcher.Invoke(() => new PythonWindow(false).Show());
                                            });

                                            txbx.EmptyEntry(CURRENT_DIRECTORY);
                                            SendTXTBoxMsg("Starting Tor window");
                                            break;
                                        case "hexedit":
                                            HexEdit hx = new HexEdit();
                                            hx.Show();
                                            txbx.EmptyEntry(CURRENT_DIRECTORY);
                                            break;
                                        case "http-request":
                                            HTTP hTTP = new HTTP();
                                            hTTP.Show();
                                            txbx.EmptyEntry(CURRENT_DIRECTORY);
                                            break;
                                        case "networksniffer":
                                        case "nwsf":
                                            NetworkSniff netsn = new NetworkSniff();
                                            netsn.Show();
                                            txbx.EmptyEntry(CURRENT_DIRECTORY);
                                            break;
                                        default:
                                            history.AddToHistory(command[1]);
                                            SendTXTBoxMsg("Error: There was an error parsing that command to PIERCE! Check spelling and try again");
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                if (command[1].ToLower().StartsWith(" tempmail") == true)
                                {
                                    history.AddToHistory(command[1]);
                                    if (args[2] == "--create" || args[2] == "-c")
                                        CreateTempMail(args.Length <= 3 ? 1 : Convert.ToInt32(args[3]));
                                }
                                else if (command[1].ToLower().StartsWith(" decompile") == true)
                                {
                                    history.AddToHistory(command[1]);
                                    try
                                    {
                                        string path = "";
                                        for (int i = 2; i < args.Length; i++)
                                            path += args[i];
                                        CSharpDecompiler decompiler = new CSharpDecompiler(path, new DecompilerSettings());
                                        string code = decompiler.DecompileWholeModuleAsString();
                                        SendTXTBoxMsg(code);
                                    }
                                    catch (Exception et){
                                        SendTXTBoxMsg(et.ToString());
                                    }
                                }
                                else if (command[1].ToLower().StartsWith(" jwt") == true){
                                    history.AddToHistory(command[1]);
                                    JWT(args[2]);
                                }
                                else if (command[1].ToLower().StartsWith(" subnetaddress")){
                                    history.AddToHistory(command[1]);
                                    SendTXTBoxMsg(getSubnetAddressFromIPNetMask(args[2]));
                                }
                                else if (command[1].ToLower().StartsWith(" cd")){
                                    history.AddToHistory(command[1]);
                                    string dirc = "";
                                    for (int i = 2; i < args.Length - 1; i++)
                                        dirc += args[i] + " ";
                                    dirc += args[args.Length - 1];
                                    CDCommand(dirc);
                                }
                                else if (command[1].ToLower().StartsWith(" sendhttp"))
                                {
                                    history.AddToHistory(command[1]);
                                    HTTP(args[2], args[3], args[4]);
                                }
                                else if (command[1].ToLower().StartsWith(" stego")) {
                                    history.AddToHistory(command[1]);
                                    Stego stego = new Stego();
                                    if (args[2].ToLower() =="-t") {
                                        //stego -t [filepath] [text stream] (only works with pngs and bmps)
                                        Bitmap img = new Bitmap(args[3]);
                                        string ns = "";
                                        if (args[4].StartsWith("-sp".ToLower())) {
                                            string pass = args[4].Split('=')[1];
                                            for (int i = 5; i < args.Length - 1; i++)
                                                ns += args[i] + " ";
                                            ns += args[args.Length - 1];
                                            ns = CryptoStego.EncryptStringAES(ns, pass);
                                        }
                                        else {
                                            for (int i = 4; i < args.Length - 1; i++)
                                                ns += args[i] + " ";
                                            ns += args[args.Length - 1];
                                        }
                                        Bitmap stegImg = stego.embedText(ns, img);
                                        stegImg.Save($@"{CURRENT_DIRECTORY}\pierce-stego-out.png",
                                            System.Drawing.Imaging.ImageFormat.Png);
                                        SendTXTBoxMsg($@"Success! Saved image to {CURRENT_DIRECTORY}\pierce-stego-out.png with phrase:{Environment.NewLine+ns}");
                                    }
                                    else if (args[2].ToLower() == "-e") {
                                        //stego -e [filepath]
                                        Bitmap bitmap = new Bitmap(args[3]);
                                        string extracted = stego.extractText(bitmap);
                                        if (args.Length > 4)
                                        {
                                            if (args[4].StartsWith("-p")
                                                || args[4].StartsWith("--password"))
                                            {
                                                string pass = args[4].Split('=')[1];
                                                try
                                                {
                                                    extracted = CryptoStego.DecryptStringAES(extracted,
                                                        pass);
                                                    SendTXTBoxMsg($"Result: {extracted}");
                                                }
                                                catch
                                                {
                                                    SendTXTBoxMsg("Error: There was an error when extracting this, try re-entering password...");
                                                }
                                            }
                                        }
                                        else
                                            SendTXTBoxMsg($"Result: {extracted}");
                                    }

                                }
                                else if (command[1].ToLower().StartsWith(" gethttp"))
                                {
                                    history.AddToHistory(command[1]);
                                    SendTXTA("Retrieving info please wait...");
                                    SendTXTBoxMsg(await GetHTTP(args[2]));
                                }
                                else if (command[1].ToLower().StartsWith(" dns") == true)
                                {
                                    history.AddToHistory(command[1]);
                                    if (args[2] == "--query" || args[2] == "-q")
                                        DnsLookupEnumeration(args[3]);
                                    else if (args[2] == "-x") {
                                        IPHostEntry dns = Dns.GetHostEntry(args[3]);
                                        StringBuilder sb = new StringBuilder();
                                        sb.AppendLine($"Host name: {dns.HostName}");
                                        sb.AppendLine($"Addresses: ");
                                        for (int i = 0; i < dns.AddressList.Length; i++)
                                            sb.AppendLine($"\t- {dns.AddressList[i]}");
                                        sb.AppendLine($"Aliases: ");
                                        for (int i = 0; i < dns.Aliases.Length; i++)
                                            sb.AppendLine($"\t- {dns.Aliases[i]}");
                                        SendTXTBoxMsg(sb.ToString());
                                    }
                                    else
                                        DNSServerLookup(args[2]);
                                }
                                else if (command[1].ToLower().StartsWith(" tor"))
                                {
                                    if (args[2].ToLower().StartsWith("--javascript") ||
                                        args[2].ToLower().StartsWith("-js"))
                                    {
                                        string[] prms = args[2].Split('=');
                                        if (prms[1] == "true") {
                                            PythonWindow tor = new PythonWindow(true);
                                            Dispatcher.Invoke(() => tor.Show());
                                        }
                                        else if (prms[1] == "false") {
                                            PythonWindow torFalse = new PythonWindow(false);
                                            Dispatcher.Invoke(() =>torFalse.Show());
                                        }
                                    }
                                    SendTXTBoxMsg("Starting Tor window");
                                }
                                else if (command[1].ToLower().StartsWith(" tcp"))
                                {
                                    string nmb = args[2].ToLower();
                                    switch (nmb)
                                    {
                                        case "-c":
                                        case "--connect":
                                            StringBuilder ab = new StringBuilder();
                                            textBox.IsReadOnly = true;
                                            SendTXTA("Connecting... please wait...");
                                            await Task.Run(() =>
                                            AsioInit(new StringBuilder(args[3]), int.Parse(args[4]), ab));
                                            SendTXTBoxMsg(ab.ToString());
                                            textBox.IsReadOnly = false;
                                            break;
                                    }
                                }
                                else if (command[1].ToLower().StartsWith(" md5encrypt"))
                                {
                                    history.AddToHistory(command[1]);
                                    string str = "";
                                    for (int i = 2; i < args.Length - 1; i++)
                                        str += args[i] + " ";
                                    str += args[args.Length - 1];
                                    SendTXTBoxMsg($"String: {str}\nEncrypted String (MD5): {EncryptMD5(str)}");
                                }
                                else if (command[1].ToLower().StartsWith(" sha1encrypt"))
                                {
                                    history.AddToHistory(command[1]);
                                    string str = "";
                                    for (int i = 2; i < args.Length - 1; i++)
                                        str += args[i] + " ";
                                    str += args[args.Length - 1];
                                    SendTXTBoxMsg($"String: {str}\nEncrypted String (SHA1): {EncryptSHA1(str)}");
                                }
                                else if (command[1].ToLower().StartsWith(" ffmpeg"))
                                {
                                    history.AddToHistory(command[1]);
                                    if (args[2] == "-i")
                                        GetMediaInfo(args[3]);
                                }
                                else if (command[1].ToLower().StartsWith(" cmd"))
                                {
                                    history.AddToHistory(command[1]);
                                    Process ipConf = new Process();
                                    ipConf.StartInfo.FileName = args[2];
                                    ipConf.StartInfo.UseShellExecute = false;
                                    ipConf.StartInfo.Arguments = args.Length <= 3 ? null : args[3];
                                    ipConf.StartInfo.RedirectStandardOutput = true;
                                    ipConf.Start();
                                    SendTXTBoxMsg(ipConf.StandardOutput.ReadToEnd());
                                }
                                else if (command[1].ToLower().StartsWith(" filefry"))
                                {
                                    history.AddToHistory(command[1]);
                                    FileFry(args[2], args[3], args[4], args[5], args[6]);
                                }
                                else if (command[1].ToLower().StartsWith(" port"))
                                {
                                    history.AddToHistory(command[1]);
                                    if (args[2].ToLower() == "--scan" || args[2].ToLower() == "-sc")
                                    {
                                        string IP = args[3].Split('/')[0];
                                        string[] portAB = args[3].Split('/')[1].Split('-');
                                        await PortScan(IP, portAB[0], portAB[1]);
                                    }
                                }
                                else if (command[1].ToLower().StartsWith(" ls") ||
                                    command[1].ToLower().StartsWith(" dir"))
                                {
                                    history.AddToHistory(command[1]);
                                    DisplayDir(args[2]);
                                }    
                                else if (command[1].ToLower().StartsWith(" ssh"))
                                {
                                    history.AddToHistory(command[1]);
                                    if (args[2].ToLower() == "--connect")
                                    {
                                        //HostIP, //Port, //Username, Password
                                        newConnection = NewSSHInfo(args[3], args[4], args[5], args[6]);
                                        newSSHClient = new SshClient(newConnection);
                                        textBox.IsReadOnly = true;
                                        SendTXTA("Connecting to SSH Server... please wait...");
                                        await Task.Run(() =>
                                        {
                                            try {
                                                newSSHClient.Connect();
                                            }
                                            catch (Exception sE) {
                                                Dispatcher.Invoke(() => SendTXTBoxMsg($"Error: {sE.Message}"));
                                            }
                                            if (newSSHClient.IsConnected)
                                            {
                                                history.ClearHistory();
                                                isConnectedToSSH = true;
                                                CURRENT_DIRECTORY = newSSHClient.ConnectionInfo.Username + "@"
                                                    + newSSHClient.ConnectionInfo.Host;
                                                Dispatcher.Invoke(() =>
                                                {
                                                    textBox.Text = $"{CURRENT_DIRECTORY}> ";
                                                    textBox.SelectionStart = textBox.Text.Length;
                                                    textBox.SelectionLength = 0;
                                                });
                                            }
                                        });
                                        textBox.IsReadOnly = false;
                                    }
                                    else
                                    {
                                        //HostIP, Username, Password, Command
                                        try
                                        {
                                            string cmdRes = "";
                                            for (int i = 5; i < args.Length - 1; i++)
                                                cmdRes += args[i] + " ";
                                            cmdRes += args[args.Length - 1];
                                            SSHSTREAM(args[2], args[3], args[4], cmdRes);
                                        }
                                        catch (Exception ex)
                                        { SendTXTBoxMsg(ex.ToString()); }
                                    }
                                }
                                else if (command[1].ToLower().StartsWith(" keyssh"))
                                {
                                    if (args[2].ToLower() == "--gen-rsa" || args[2].ToLower() == "-gr")
                                    {   
                                        try {
                                            await SSHRSAKeyGen(Convert.ToInt32(args[3]), args[4], command);
                                        }
                                        catch (Exception ex) {
                                            SendTXTBoxMsg(ex.Message);
                                        }
                                    }
                                }
                            }
                        }
                        catch {
                            SendTXTBoxMsg("Error: There was an error parsing that command to PIERCE! Check spelling and try again");
                        }
                    }
                    else
                    {
                        if (newSSHClient != null && isConnectedToSSH)
                        {
                            using (var cmd = newSSHClient.CreateCommand(command[1]))
                            {
                                if (String.IsNullOrWhiteSpace(command[1]))
                                    txbx.EmptyEntry(CURRENT_DIRECTORY);
                                else
                                {
                                    string fullCommand = command[1].TrimStart();
                                    if (args.Length <= 2)
                                    {
                                        switch (fullCommand)
                                        {
                                            case "exit":
                                                newSSHClient.Disconnect();
                                                newSSHClient.Dispose();
                                                newConnection = null;
                                                isConnectedToSSH = false;
                                                CURRENT_DIRECTORY =
                                                    Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                                                textBox.Text = $"{CURRENT_DIRECTORY}> ";
                                                textBox.SelectionStart = textBox.Text.Length;
                                                textBox.SelectionLength = 0;
                                                break;
                                            case "clear":
                                                history.AddToHistory(command[1]);
                                                textBox.Text = CURRENT_DIRECTORY + "> ";
                                                textBox.SelectionStart = textBox.Text.Length;
                                                textBox.SelectionLength = 0;
                                                break;
                                            case "pierce-help":
                                                SendTXTBoxMsg(HelpPierceSSH());
                                                break;
                                            default:
                                                history.AddToHistory(command[1]);
                                                await Task.Run(() => cmd.Execute());
                                                SendTXTBoxMsg(cmd.ExitStatus != 0 ? cmd.Error : cmd.Result);
                                                break;
                                        }
                                    }
                                    else {
                                        if (command[1].ToLower().StartsWith(" pierce-sftp"))
                                        {
                                            history.AddToHistory(command[1]);
                                            try {
                                                using (SftpClient sftpClient = new SftpClient(newConnection))
                                                {
                                                    string fileUp = args[2];
                                                    sftpClient.Connect();
                                                    if (args.Length > 3)
                                                        sftpClient.ChangeDirectory(args[3]);
                                                    textBox.IsReadOnly = true;
                                                    SendTXTA("Sending file to server...");
                                                    using (var uplFileStream = System.IO.File.OpenRead(fileUp))
                                                        await Task.Run(() =>
                                                        sftpClient.UploadFile(uplFileStream, fileUp, true));
                                                    sftpClient.Disconnect();
                                                    SendTXTBoxMsg($"Successfully sent file '{args[2]}'...");
                                                    textBox.IsReadOnly = false;
                                                }
                                            } catch (Exception ex) {
                                                textBox.IsReadOnly = false;
                                                SendTXTBoxMsg(ex.Message);
                                            }
                                        }
                                        else if (command[1].ToLower().StartsWith(" pierce-edit"))
                                        {
                                            history.AddToHistory(command[1]);
                                            using (var cat = newSSHClient.CreateCommand($"cat {args[2]}"))
                                            {
                                                await Task.Run(() => cat.Execute());
                                                if (cat.ExitStatus != 0)
                                                    SendTXTBoxMsg(cat.Error);
                                                else {
                                                    textEditorSSH.Text = cat.Result;
                                                    sshEditor.Width = new GridLength(1, GridUnitType.Star);
                                                    txbx.EmptyEntry(CURRENT_DIRECTORY);
                                                }
                                            }
                                        }
                                        else {
                                            history.AddToHistory(command[1]);
                                            await Task.Run(() => cmd.Execute());
                                            SendTXTBoxMsg(cmd.ExitStatus != 0 ? cmd.Error : cmd.Result);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (e.Key == Key.F1)
                    history.TraverseUp(textBox, CURRENT_DIRECTORY + ">");
                else if (e.Key == Key.F2)
                    history.TraverseDown(textBox, CURRENT_DIRECTORY + ">");
            }
            catch {
            }
        }
        public void SendTXTBoxMsg(string msg)
        {
            textBox.Text += Environment.NewLine;
            textBox.Text += "\r" + msg + "\r\n" + Environment.NewLine;
            textBox.Text += CURRENT_DIRECTORY+"> ";
            textBox.SelectionStart = textBox.Text.Length;
            textBox.SelectionLength = 0;
            textBox.ScrollToEnd();
        }
        public void SendTXTBoxMsg(string msg, string[] vs)
        {
            textBox.Text += Environment.NewLine;
            textBox.Text += "\r" + msg + "\r\n" + Environment.NewLine;
            textBox.Text += CURRENT_DIRECTORY + "> ";
            textBox.SelectionStart = textBox.Text.Length;
            textBox.SelectionLength = 0;
            textBox.ScrollToEnd();
            if (vs.Length >= 3)
            {
                string path = CURRENT_DIRECTORY + @"\" +vs[2];
                if (!File.Exists(path)) {
                    using (StreamWriter sw = File.CreateText(path)) {
                        sw.Write(msg);
                    }
                } else {
                    File.WriteAllText(path, msg);
                }
            }
        }
        public void SendTXTA(string msg)
        {
            textBox.Text += Environment.NewLine;
            textBox.Text += "\r" + msg;
            textBox.SelectionStart = textBox.Text.Length;
            textBox.SelectionLength = 0;
            textBox.ScrollToEnd();
        }
        public string getSubnetAddressFromIPNetMask(string netMask)
        {
            string subNetMask = string.Empty;
            int calSubNet = 0;
            double result = 0;
            if (!string.IsNullOrEmpty(netMask))
            {
                calSubNet = 32 - Convert.ToInt32(netMask);
                if (calSubNet >= 0 && calSubNet <= 8)
                {
                    for (int ipower = 0; ipower < calSubNet; ipower++)
                    {
                        result += Math.Pow(2, ipower);
                    }
                    double finalSubnet = 255 - result;
                    subNetMask = "255.255.255." + Convert.ToString(finalSubnet);
                }
                else if (calSubNet > 8 && calSubNet <= 16)
                {
                    int secOctet = 16 - calSubNet;

                    secOctet = 8 - secOctet;

                    for (int ipower = 0; ipower < secOctet; ipower++)
                    {
                        result += Math.Pow(2, ipower);
                    }
                    double finalSubnet = 255 - result;
                    subNetMask = "255.255." + Convert.ToString(finalSubnet) + ".0";
                }
                else if (calSubNet > 16 && calSubNet <= 24)
                {
                    int thirdOctet = 24 - calSubNet;
                    thirdOctet = 8 - thirdOctet;
                    for (int ipower = 0; ipower < thirdOctet; ipower++)
                    {
                        result += Math.Pow(2, ipower);
                    }
                    double finalSubnet = 255 - result;
                    subNetMask = "255." + Convert.ToString(finalSubnet) + ".0.0";
                }
                else if (calSubNet > 24 && calSubNet <= 32)
                {
                    int fourthOctet = 32 - calSubNet;
                    fourthOctet = 8 - fourthOctet;
                    for (int ipower = 0; ipower < fourthOctet; ipower++)
                    {
                        result += Math.Pow(2, ipower);
                    }
                    double finalSubnet = 255 - result;
                    subNetMask = Convert.ToString(finalSubnet) + ".0.0.0";
                }
            }

            return subNetMask;
        }
        public void DisplayTCP()
        {
            Process ipConf = new Process();
            ipConf.StartInfo.FileName = "ipconfig";
            ipConf.StartInfo.UseShellExecute = false;
            ipConf.StartInfo.Arguments = "/all";
            ipConf.StartInfo.RedirectStandardOutput = true;
            ipConf.Start();
            SendTXTBoxMsg(ipConf.StandardOutput.ReadToEnd());
        }
        public void DisplayDir(string curr_Direc)
        {
            if (!Directory.Exists(curr_Direc)) {
                SendTXTBoxMsg($"Error: Cannot find directory '{curr_Direc}'. Could be moved or deleted...");
                return;
            }
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"===---{curr_Direc}---====");
            int i = 1;
            foreach (var path in Directory.GetFiles(curr_Direc)) {
                sb.AppendLine($"\t{i}. {Path.GetFileName(path)} -- {new FileInfo(path).Length} bytes");
                i++;
            }
            sb.AppendLine("---Directories---");
            int j = 1;
            foreach (var path in Directory.GetDirectories(curr_Direc)) {
                sb.AppendLine($"\t{j}. {path}");
                j++;
            }
            SendTXTBoxMsg(sb.ToString());
        }
        private void CDCommand(string input)
        {
            if (input == "..")
            {
                try {
                    CURRENT_DIRECTORY = Directory.GetParent(CURRENT_DIRECTORY).FullName;
                    txbx.EmptyEntry(CURRENT_DIRECTORY);
                } catch {
                    SendTXTBoxMsg("Error: Cannot go any further!");
                }
            }
            else
            {
                if (!input.Contains('\u005c'))
                    input = @"\" + input;
                if (Directory.Exists(CURRENT_DIRECTORY + input))
                {
                    CURRENT_DIRECTORY = CURRENT_DIRECTORY + input;
                    txbx.EmptyEntry(CURRENT_DIRECTORY);
                }
                else
                    SendTXTBoxMsg($"Error: Cannot find directory {input} in {CURRENT_DIRECTORY}");
            }
        }
        public async Task TemporaryEmailDemo(int count)
        {
            StringBuilder sb = new StringBuilder();
            using (var tempMail = new TemporaryMail())
            {
               var mailbox = await tempMail.GenerateRandomMailboxes(count);
                sb.AppendLine("Success!");
                foreach (string a in mailbox)
                    sb.AppendLine("Mail: " + a);
                SendTXTBoxMsg(sb.ToString());
            }
        }
        private async Task SSHRSAKeyGen(int keyBits, string comment, string[] vs)
        {
            await Task.Run(() =>
            {
                SSHKeyGen sshkey = new SSHKeyGen(keyBits);
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("====----PRIVATE KEY----====");
                sb.AppendLine(sshkey.ToPrivateKey());
                sb.AppendLine();
                sb.AppendLine("====----RFC PUBLIC KEY----====");
                sb.AppendLine(sshkey.ToRFCPublicKey(comment));
                Dispatcher.Invoke(() =>
                {
                    SendTXTBoxMsg(sb.ToString(), vs);
                });
            });
        }
        private string EncryptMD5(string text)
        {
            md5.ComputeHash(ASCIIEncoding.ASCII.GetBytes(text));
            byte[] result = md5.Hash;
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < result.Length; i++)
                sb.Append(result[i].ToString("x2"));
            return sb.ToString();
        }
        private string EncryptSHA1(string text)
        {
            sha1.ComputeHash(ASCIIEncoding.ASCII.GetBytes(text));
            byte[] result = sha1.Hash;
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < result.Length; i++)
                sb.Append(result[i].ToString("x2"));
            return sb.ToString();
        }
        public void DNSServerLookup(string DNS)
        {
            IPHostEntry host = Dns.GetHostEntry(DNS);
            StringBuilder sb = new StringBuilder($"==={DNS}===:");
            int i = 0;
            foreach (IPAddress adrs in host.AddressList){
                i++;
                sb.Append($"\n\tAddress{i}: {adrs}");
            }
            SendTXTBoxMsg(sb.ToString());
        }
        public void JWT(string token)
        {
            var handler = new JwtSecurityTokenHandler();
            var decode = handler.ReadJwtToken(token);
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("===Decoded===");
            sb.AppendLine($"Decoded String: {decode}");
            sb.AppendLine($"Algorithm: {decode.SignatureAlgorithm}");
            var claims = decode.Claims.ToList();
            sb.AppendLine("--Payload--");
            foreach (var claim in claims)
                sb.AppendLine($"{claim.Type}:\t{claim.Value}");
            sb.AppendLine("---Exploits---");
            //Check for CVE-2015-2951
            sb.AppendLine("CVE-2015-2951 (\"alg\" none exploit)");
            JWTExploit exp = new JWTExploit(token);
            sb.AppendLine("[+] " + exp.JWTAlgNone("none"));
            sb.AppendLine("[+] " + exp.JWTAlgNone("None"));
            sb.AppendLine("[+] " + exp.JWTAlgNone("NONE"));
            sb.AppendLine("[+] " + exp.JWTAlgNone("nOnE"));
            //JWTAlgNone(token);
            SendTXTBoxMsg(sb.ToString());
        }
        public void NetworkSniff()
        {
            var devices = CaptureDeviceList.Instance;
            string a = "=== List of devices ===" + Environment.NewLine;
            foreach (var dev in devices)
                a += dev.ToString();
            SendTXTBoxMsg(a);
        }
        [Obsolete]
        private async void DnsLookupEnumeration(string url)
        {
            var client = new LookupClient()
            {
                UseCache = true
            };
            var result = await client.QueryAsync(url, QueryType.A);
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("URL\tRECORD CLASS\tADDRESS\t  RDATA");
            sb.AppendLine("-----------------------------------");
            foreach (var aRecord in result.Answers.ARecords())
                sb.AppendLine($"{url}\t{aRecord.RecordClass.ToString()}\t{aRecord.Address.ToString()}\t" +
                    $"  {aRecord.RawDataLength}");
            SendTXTBoxMsg(sb.ToString());
        }
        private void FileFry(string find, string replace, string frequency, string start, string directory)
        {
            int i = 0;
            //File fry configuration
            int findBytes = Convert.ToInt32(find);
            byte replaceBytes = Convert.ToByte(replace);
            byte[] readDirec = File.ReadAllBytes(directory);

            var wr = new List<byte>();
            int frequencyBytes = Convert.ToInt32(frequency);
            int startingBytes = Convert.ToInt32(start);

            int r0 = 0;
            foreach (byte s in readDirec)
            {
                if (r0 > startingBytes)
                {
                    if (s == findBytes)
                    {
                        if (i % frequencyBytes == 0)
                            wr.Add(replaceBytes);
                        else
                            wr.Add(s);
                    }
                }
                else
                    wr.Add(s);
                r0++;
                i++;
            }
            byte[] write = wr.ToArray();
            File.WriteAllBytes(directory, write);
            SendTXTBoxMsg($"File '{directory}' has been fried...");
        }
        private async void CapturingPackets()
        {
            //this method opens an adapter and begins capturing packets
            CaptureDeviceList devices = CaptureDeviceList.Instance;
            await Task.Run(() =>
            {
                for (int i = 0; i < devices.Count; i++)
                {
                    ICaptureDevice device = devices[i];
                    device.OnPacketArrival += new PacketArrivalEventHandler(device_OnPacketArrival);
                    int readTimeOutMilliseconds = 1000;
                    device.Open(DeviceMode.Promiscuous, readTimeOutMilliseconds);
                    device.StartCapture();

                }
            });
        }
        private async void HTTP(string request_type,
            string dict, string url)
        {
            if (request_type.ToLower() == "--post" ||
                request_type.ToLower() == "-p") {
                try
                {
                    HttpClient client = new HttpClient();
                    var values = new Dictionary<string, string>();

                    string[] gh = dict.Split(',');
                    for (int i = 0; i < gh.Length; i++)
                    {
                        string[] pms = gh[i].Split('=');
                        values.Add(pms[0], pms[1]);
                    }
                    var content = new FormUrlEncodedContent(values);
                    var response = await client.PostAsync(url, content);
                    SendTXTA(response.Headers.ToString());
                    SendTXTBoxMsg(await response.Content.ReadAsStringAsync());
                } catch (Exception ex){
                    SendTXTBoxMsg("Error: "+ex.Message);
                }
            }
        }
        private async Task<string> GetHTTP(string url) {
            HttpClient httpClient = new HttpClient();
            string res = await httpClient.GetStringAsync(url);
            return res;
        }
        private async void device_OnPacketArrival(object sender, CaptureEventArgs e)
        {
            //prints the method on seperate thread
            await Task.Run(() =>
            {
                Dispatcher.Invoke(() =>
                {
                    DateTime time = e.Packet.Timeval.Date;
                    int len = e.Packet.Data.Length;
                    SendTXTA(string.Format("{0}:{1}:{2},{3} Len={4}",
                        time.Hour, time.Minute, time.Second, time.Millisecond, len));
                });
            });
        }
        private void SSHSTREAM(string hostIP, string username, string password, string command)
        {
            ConnectionInfo ConnNfo = new ConnectionInfo(hostIP, 22, username,
             new AuthenticationMethod[]{ new PasswordAuthenticationMethod(username,password)}
         );
            using (SshClient sshClient = new SshClient(ConnNfo))
            {
                sshClient.Connect();
                using (var cmd = sshClient.CreateCommand(command))
                {
                    cmd.Execute();
                    StringBuilder sb = new StringBuilder();

                    sb.AppendLine($"{sshClient.ConnectionInfo.Username}@{sshClient.ConnectionInfo.Host}> " + cmd.CommandText);
                    sb.AppendLine(cmd.Result);
                    if (cmd.ExitStatus != 0)
                        sb.AppendLine(cmd.Error);
                    SendTXTBoxMsg(sb.ToString());
                }
                sshClient.Disconnect();
            }
        }
        private ConnectionInfo NewSSHInfo(string hostIP, string port,string username, string password)
        {
            return new ConnectionInfo(hostIP, Convert.ToInt32(port), username,
             new AuthenticationMethod[] { new PasswordAuthenticationMethod(username, password) }
         );
        }
        private async void GetMediaInfo(string inputFile)
        {
            SendTXTA("Retriving info...");
            try
            {
                IMediaAnalysis mediaInfo = await FFProbe.AnalyseAsync(inputFile);
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("===---Result---===");
                sb.AppendLine("Duration: " + mediaInfo.Duration.ToString());
                sb.AppendLine($"Average Frame rate: {mediaInfo.PrimaryVideoStream.AvgFrameRate} fps");
                sb.AppendLine($"Bit Rate: {mediaInfo.Format.BitRate} bps");
                sb.AppendLine($"Stream Count: {mediaInfo.Format.StreamCount}");
                sb.AppendLine($"\nOther Tags:");
                for (int i = 0; i < mediaInfo.Format.Tags.Count; i++)
                {
                    KeyValuePair<string, string> md = mediaInfo.Format.Tags.ElementAt(i);
                    sb.AppendLine($"{i}. {md.Key}: {md.Value}");
                }
                SendTXTBoxMsg(sb.ToString());
            } catch (FFMpegException ex) {
                SendTXTBoxMsg($"Error: {ex.Message}");
            }
        }
        private async void pythonBtn_Click(object sender, RoutedEventArgs e){
            Dispatcher.Invoke(DispatcherPriority.Background,
                  new Action(() => SendTXTBoxMsg("Opening Tor Window...")));
            await Task.Run(() => 
            Dispatcher.Invoke(()=>(new PythonWindow(false)).Show()));
        }
        private void SqlBtn_Click(object sender, RoutedEventArgs e){
            (new SqliWindow()).Show();
        }
        private void Button_Click_4(object sender, RoutedEventArgs e){
            (new NetworkSniff()).Show();
        }
        private void Button_Click_5(object sender, RoutedEventArgs e){
            (new HexEdit()).Show();
        }
        private async void gameExp_Click(object sender, RoutedEventArgs e){
            Dispatcher.Invoke(DispatcherPriority.Background,
                  new Action(() => SendTXTBoxMsg("Opening Game exploiter Window...")));
            await Task.Run(() =>
            Dispatcher.Invoke(() =>(new GameExploit()).Show()));
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (isConnectedToSSH)
            {
                isConnectedToSSH = false;
                newSSHClient.Disconnect();
                newSSHClient.Dispose();
            }
        }
        private void Button_Click_6(object sender, RoutedEventArgs e)
        {
            sshEditor.Width = new GridLength(0);
        }
        private void textBox_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Up){
                e.Handled = true;
                textBox.CaretIndex = textBox.Text.Length;
                history.TraverseUp(textBox, CURRENT_DIRECTORY + ">");
                textBox.ScrollToEnd();
            }
            if (e.Key == Key.Down){
                e.Handled = true;
                textBox.CaretIndex = textBox.Text.Length;
                history.TraverseDown(textBox, CURRENT_DIRECTORY + ">");
                textBox.ScrollToEnd();
            }
        }
    }
}
