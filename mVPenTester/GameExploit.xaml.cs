using CefSharp;
using ICSharpCode.Decompiler;
using ICSharpCode.Decompiler.CSharp;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Xml;

namespace mVPenTester
{
    /// <summary>
    /// Interaction logic for GameExploit.xaml
    /// </summary>
    public partial class GameExploit : Window
    {
        #region VARIABLES
        public List<byte> sepBuff;
        #endregion
        public GameExploit()
        {
            InitializeComponent();
            #region INIT
            sepBuff = new List<byte>();
            #endregion
        }
        private void Window_Loaded(object sender, RoutedEventArgs e){
            string path = 
                Directory.GetParent(System.IO.Path.GetDirectoryName(
                    Assembly.GetExecutingAssembly().Location)).ToString();
            luaEditor.Address = $@"{Directory.GetParent(path).ToString()}\FileContents\Monaco\Monaco.html";
        }
        private void Grid_MouseDown(object sender, MouseButtonEventArgs e){
            if (e.ChangedButton == MouseButton.Left)
                DragMove();
        }
        private void close_Click(object sender, RoutedEventArgs e){
            Close();
        }
        #region CLICKER_HERO_EXPLOITER
        public byte[] GetSkipped(byte[] ba, int index){
            List<byte> vs = new List<byte>();
            int i = 0;
            foreach (byte b in ba){
                if (i > index)
                    vs.Add(b);
                else
                    sepBuff.Add(b);
                i++;
            }
            byte[] newByteArr = new byte[vs.Count];
            for (int j = 0; j < newByteArr.Length; j++)
                newByteArr[j] = vs[j];
            return newByteArr;
        }
        public static Stream Decompress(byte[] data)
        {
            var outputStream = new MemoryStream();
            using (var compressedStream = new MemoryStream(data))
            using (var inputStream = new InflaterInputStream(compressedStream)){
                inputStream.CopyTo(outputStream);
                outputStream.Position = 0;
                return outputStream;
            }
        }
        private void CHClickDecode_Click(object sender, RoutedEventArgs e){
            try{
                byte[] inp = Convert.FromBase64String(CHEinput.Text);
                inp = GetSkipped(inp, 0x17);
                string outputRes = "";
                Stream stream = Decompress(inp);
                using (StreamReader streamReader = new StreamReader(stream, Encoding.UTF8)){
                    outputRes = streamReader.ReadToEnd();
                }
                CHEoutput.Text = outputRes;
            }
            catch (Exception ex){
                CHEoutput.Text = ex.Message;
            }
        }
        private void CHCClickEncode_Click(object sender, RoutedEventArgs e){
            try{
                var compress = new Func<byte[], byte[]>(a =>{
                    using (var ms = new System.IO.MemoryStream()){
                        using (var compressor =
                               new Ionic.Zlib.ZlibStream(ms,
                                                          Ionic.Zlib.CompressionMode.Compress,
                                                          Ionic.Zlib.CompressionLevel.BestCompression)){
                            compressor.Write(a, 0, a.Length);
                        }
                        return ms.ToArray();
                    }
                });
                byte[] Compressed = compress(Encoding.ASCII.GetBytes(CHEoutput.Text));
                byte[] constantData = new byte[sepBuff.Count];
                for (int i = 0; i < sepBuff.Count; i++)
                    constantData[i] = sepBuff[i];

                List<byte> byteRES = new List<byte>();
                foreach (byte b in constantData)
                    byteRES.Add(b);
                foreach (byte b in Compressed)
                    byteRES.Add(b);

                byte[] result = new byte[byteRES.Count];
                for (int i = 0; i < byteRES.Count; i++)
                    result[i] = byteRES[i];

                CHEinput.Text = Convert.ToBase64String(result);
            }
            catch (Exception ex){
                CHEinput.Text = ex.Message;
            }
        }
        #endregion
        #region ROBLOX LUA EXPLOIT
        private async Task<string> GetScript(){
            if (luaEditor.CanExecuteJavascriptInMainFrame){
                JavascriptResponse respause = await luaEditor.EvaluateScriptAsync("editor.getValue()");
                if (respause.Success)
                    return respause.Result.ToString();
            }
            return "";
        }
        private async void injectLua_Click(object sender, RoutedEventArgs e){
            MessageBox.Show(await GetScript());
        }
        #endregion
        #region C# DECOMPILER
        private void TextEditor_Drop(object sender, DragEventArgs e){
            if (e.Data.GetDataPresent(DataFormats.FileDrop)){
                string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);

                CSharpDecompiler decompiler = new CSharpDecompiler(files[0],
                    new DecompilerSettings());
                csharpDec.Text = decompiler.DecompileWholeModuleAsString();
                string ndf = "";
                foreach (object asds in decompiler.DecompileWholeModuleAsSingleFile().Children)
                    ndf += asds;
                csharpMods.Text = ndf;
            }
        }
        #endregion
    }
}
