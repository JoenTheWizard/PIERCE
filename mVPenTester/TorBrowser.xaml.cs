using CefSharp;
using CefSharp.Wpf.HwndHost;
using Knapcode.TorSharp;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;
using Titanium.Web.Proxy;
using Titanium.Web.Proxy.EventArguments;
using Titanium.Web.Proxy.Http;
using Titanium.Web.Proxy.Models;

namespace mVPenTester
{
    /// <summary>
    /// Interaction logic for PythonWindow.xaml
    /// </summary>
    /// Make sure to add a tracker blocker
    public partial class PythonWindow : Window
    {
        public TorSharpSettings settings;
        public HttpClient httpClient;
        public TorSharpProxy proxy;
        private TextBoxHistory textBoxHistory;
        #region Intercept/Capture HTTP
        private ProxyServer proxyServer;
        public string IPIntercept;
        public string PortIntercept;
        private bool isActivityShown;
        public string rqString;
        #endregion
        private enum WEB_STATE
        {
            BACK,
            FORWARD,
            REFRESH
        }
        public PythonWindow(bool isJavaScript) {
            InitializeComponent();
            dragControl.NewItemFactory = NewTab;
            tBrowser.BrowserSettings.Javascript = isJavaScript ? CefState.Enabled :
                CefState.Disabled;
            isJSOptions.Text += isJavaScript ? "TRUE" : "FALSE";
            this.MaxHeight = SystemParameters.MaximizedPrimaryScreenHeight;
        }
        private Button backForwardRefresh(string Content, Thickness Margin)
        {
            Button btnBack = new Button()
            {
                Content = Content,
                BorderThickness = new Thickness(0, 0, 0.8, 0.8),
                VerticalAlignment = VerticalAlignment.Top,
                Padding = goBack.Padding,
                Margin = Margin,
                BorderBrush = goBack.BorderBrush,
                Height = 16,
                Width = 28,
                Background = Brushes.Transparent,
                HorizontalAlignment = HorizontalAlignment.Left,
                Foreground = Brushes.White
            };
            btnBack.Resources = goBack.Resources;
            return btnBack;
        }
        public Func<TabItem> NewTab
        {
            get
            {
                return () =>
                {
                    //var dateTime = DateTime.Now;
                    Grid grid = new Grid();
                    ChromiumWebBrowser newBrowser = new ChromiumWebBrowser();
                    newBrowser.Address = "https://duckduckgo.com";
                    newBrowser.TitleChanged += NewBrowser_TitleChanged;
                    newBrowser.Margin = new Thickness(0, 20, 0, 0);
                    //Grid search
                    Grid gridSearch = new Grid()
                    {
                        VerticalAlignment = VerticalAlignment.Top,
                        Background = new SolidColorBrush(Color.FromRgb((byte)74, (byte)74, (byte)74)),
                        Height = 20
                    };
                    //Search box
                    TextBox searchBox = new TextBox()
                    {
                        VerticalAlignment = VerticalAlignment.Top,
                        Margin = new Thickness(90, 2, 2, 0),
                        Foreground = Brushes.White,
                        BorderThickness = new Thickness(0),
                        Background = new SolidColorBrush(Color.FromRgb((byte)43, (byte)43, (byte)43)),
                        FontFamily = new FontFamily("Consolas")
                    };
                    searchBox.Resources = dt.Resources;

                    searchBox.KeyDown += SearchBox_KeyDown;
                    //Buttons
                    Button btnBack = backForwardRefresh("⮘", goBack.Margin);
                    Button btnForward = backForwardRefresh("⮚", goForward.Margin);
                    Button btnRefresh = backForwardRefresh("⟳", reloadPage.Margin);
                    btnRefresh.FontSize = 13;
                    btnBack.Click += BtnBack_Click;
                    btnForward.Click += BtnForward_Click;
                    btnRefresh.Click += BtnRefresh_Click;

                    gridSearch.Children.Add(btnBack);
                    gridSearch.Children.Add(btnForward);
                    gridSearch.Children.Add(btnRefresh);
                    gridSearch.Children.Add(searchBox);

                    grid.Children.Add(newBrowser);
                    grid.Children.Add(gridSearch);
                    return new TabItem()
                    {
                        Header = "New Tab",
                        Content = grid
                    };
                };
            }
        }
        private void getCurrentWeb(WEB_STATE wEB_)
        {
            TabItem ti = (TabItem)dragControl.SelectedItem;
            Grid grid = (Grid)ti.Content;
            foreach (UIElement uI in grid.Children)
            {
                if (uI is ChromiumWebBrowser)
                {
                    ChromiumWebBrowser ch = (ChromiumWebBrowser)uI;
                    if (wEB_ == WEB_STATE.BACK)
                        ch.Back();
                    else if (wEB_ == WEB_STATE.FORWARD)
                        ch.Forward();
                    else if (wEB_ == WEB_STATE.REFRESH)
                        ch.Reload();
                }
            }
        }
        private void BtnBack_Click(object sender, RoutedEventArgs e)
        {
            getCurrentWeb(WEB_STATE.BACK);
        }
        private void BtnForward_Click(object sender, RoutedEventArgs e)
        {
            getCurrentWeb(WEB_STATE.FORWARD);
        }
        private void BtnRefresh_Click(object sender, RoutedEventArgs e)
        {
            getCurrentWeb(WEB_STATE.REFRESH);
        }
        public void SearchBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                TabItem ti = (TabItem)dragControl.SelectedItem;
                Grid grid = ti.Content as Grid;
                string adr = "";
                foreach (UIElement uIElement in grid.Children)
                {
                    if (uIElement is Grid)
                    {
                        Grid grid1 = uIElement as Grid;
                        foreach (UIElement uIElement1 in grid1.Children)
                        {
                            if (uIElement1 is TextBox adrTx)
                            {
                                adr = adrTx.Text;
                            }
                        }
                    }
                }
                foreach (UIElement uIElement2 in grid.Children)
                {
                    if (uIElement2 is ChromiumWebBrowser chdm)
                    {
                        chdm.Address = adr.Contains(".") ? adr :
                            "https://duckduckgo.com/?q=" + adr;
                    }
                }
            }
        }
        private void NewBrowser_TitleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            TabItem ti = (TabItem)dragControl.SelectedItem;
            ti.Header = e.NewValue.ToString();
        }
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            isActivityShown = true;
            tBrowser.Address = "https://duckduckgo.com/";
            textBoxHistory = new TextBoxHistory();
            tBrowser.ConsoleMessage += TBrowser_ConsoleMessage;
        }
        private void TBrowser_ConsoleMessage(object sender, ConsoleMessageEventArgs e)
        {
            Dispatcher.Invoke(() =>
            {
                jsConsoleLog.AppendText(e.Message + Environment.NewLine);
                jsConsoleLog.ScrollToEnd();
            });
        }
        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
                DragMove();
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
        private void maximumMin_Click(object sender, RoutedEventArgs e)
        {
            WindowState = (WindowState == WindowState.Normal) ? WindowState = WindowState.Maximized : WindowState = WindowState.Normal;
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            this.BorderThickness = (WindowState == WindowState.Maximized) ? this.BorderThickness = new System.Windows.Thickness(6)
               : this.BorderThickness = new System.Windows.Thickness(0);
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        public void SendTXTBoxMsg(string msg)
        {
            torConsole.Text = torConsole.Text + Environment.NewLine;
            torConsole.Text += "\r" + msg + "\r\n" + Environment.NewLine;
            torConsole.Text += "> ";
            torConsole.SelectionStart = torConsole.Text.Length;
            torConsole.SelectionLength = 0;
            torConsole.ScrollToEnd();
        }
        public void SendTXTBox(string msg)
        {
            torConsole.Text = torConsole.Text + Environment.NewLine;
            torConsole.Text += "\r" + msg + "\r\n" + Environment.NewLine;
            torConsole.SelectionStart = torConsole.Text.Length;
            torConsole.SelectionLength = 0;
            torConsole.ScrollToEnd();
        }
        [Obsolete]
        private async void torConsole_KeyDown(object sender, KeyEventArgs e)
        {
            string[] lines = torConsole.Text.Split('\n');
            string lastLine = lines[lines.Length - 1];
            string[] command = lastLine.Split('>');
            try
            {
                string[] args = command[1].Split(' ');
                if (e.Key == Key.Enter)
                {
                    try
                    {
                        string ah = command[1].TrimStart();
                        if (args.Length <= 2)
                        {
                            if (String.IsNullOrWhiteSpace(command[1]))
                            {
                                TextBoxMessage bx = new TextBoxMessage(torConsole);
                                bx.EmptyEntry();
                            }
                            else
                            {
                                switch (ah.ToLower())
                                {
                                    case "help":
                                        textBoxHistory.AddToHistory(command[1]);
                                        StringBuilder sb = new StringBuilder();
                                        sb.AppendLine("=== List of commands ===");
                                        sb.AppendLine("\t -- tor - [--start/s || --stop] - begins or stops Tor proxy");
                                        sb.AppendLine("\t -- url [--set/-s] [url] - sets the URL");
                                        sb.AppendLine("\t -- identity [--change/-c || --id] - displays or changes identity (only if Tor proxy is running)");
                                        sb.AppendLine("\t -- interceptproxy [--start || --stop] - begins or stops intercept proxy for viewing HTTP traffic");
                                        SendTXTBoxMsg(sb.ToString());
                                        break;
                                    case "clear":
                                        textBoxHistory.AddToHistory(command[1]);
                                        torConsole.Text = "> ";
                                        torConsole.SelectionStart = torConsole.Text.Length;
                                        torConsole.SelectionLength = 0;
                                        break;
                                    case "sendpost":
                                        //byte[] asm = Encoding.ASCII.GetBytes("username=*&password=*");
                                        /*
                                         POST http://68.183.45.200:30230/login
                                         Referer: http://68.183.45.200:30230/login?message=Authentication%20Failed
                                         Content-Type: application/x-www-form-urlencoded
                                         username=*&password=*
                                         */
                                        Navigate(tBrowser);
                                        break;
                                    case "exit":
                                    case "close":
                                        Close();
                                        break;
                                    default:
                                        SendTXTBoxMsg("ERROR: Error with parsing command...");
                                        break;
                                }
                            }
                        }
                        else
                        {
                            if (command[1].ToLower().StartsWith(" tor") == true)
                            {
                                textBoxHistory.AddToHistory(command[1]);
                                if (args[2] == "--start" || args[2] == "-s")
                                {
                                    SendTXTBox("Setting up Tor Proxy... please wait...");
                                    settings = new TorSharpSettings
                                    {
                                        ZippedToolsDirectory = Path.Combine(Path.GetTempPath(), "TorZipped"),
                                        ExtractedToolsDirectory = Path.Combine(Path.GetTempPath(), "TorExtracted"),
                                        PrivoxySettings = { Port = 1337 },
                                        TorSettings =
                                        {
                                        SocksPort = 1338,
                                        ControlPort = 1339,
                                        ControlPassword = "foobar",
                                        },
                                    };
                                    await new TorSharpToolFetcher(settings, new HttpClient()).FetchAsync();
                                    proxy = new TorSharpProxy(settings);

                                    var handler = new HttpClientHandler
                                    {
                                        Proxy = new WebProxy(new Uri("http://localhost:" + settings.PrivoxySettings.Port))
                                    };
                                    await Cef.UIThreadTaskFactory.StartNew(delegate
                                    {
                                        string ip = "http://localhost";
                                        string port = settings.PrivoxySettings.Port.ToString();
                                        var rc = this.tBrowser.GetBrowser().GetHost().RequestContext;
                                        var dict = new Dictionary<string, object>();
                                        dict.Add("mode", "fixed_servers");
                                        dict.Add("server", "" + ip + ":" + port + "");
                                        string error;
                                        bool success = rc.SetPreference("proxy", dict, out error);
                                    });

                                    httpClient = new HttpClient(handler);
                                    await proxy.ConfigureAndStartAsync();

                                    await proxy.GetNewIdentityAsync();
                                    string ipIdentity = await httpClient.GetStringAsync("http://api.ipify.org");

                                    SendTXTBoxMsg("Identity: " + ipIdentity + Environment.NewLine + "Tor proxy started...");
                                    StringBuilder @string = new StringBuilder();
                                    @string.AppendLine("SUCCESS! TOR PROXY INITIALIZED");
                                    @string.AppendLine($"IP IDENTITY: {ipIdentity + Environment.NewLine}");
                                    torSettingsTXT.AppendText(@string.ToString());
                                    activeProxy.Items.Add(new PROXYACTIVITY()
                                    {
                                        interfaceProxy = $"127.0.0.1:{settings.PrivoxySettings.Port.ToString()}",
                                        service = "TOR",
                                        isRunning = "True",
                                        proxyInfo = $"Socks Port: {settings.TorSettings.SocksPort + Environment.NewLine}" +
                                        $"Control port: {settings.TorSettings.ControlPort}"
                                    });
                                    //proxy.Stop();
                                }
                                else if (args[2] == "--stop")
                                {
                                    proxy.Stop();
                                    await Cef.UIThreadTaskFactory.StartNew(delegate
                                    {
                                        string ip = "http://localhost";
                                        string port = settings.PrivoxySettings.Port.ToString();
                                        var rc = this.tBrowser.GetBrowser().GetHost().RequestContext;
                                        var dict = new Dictionary<string, object>();
                                        dict.Add("mode", "direct");
                                        dict.Add("server", "" + ip + ":" + port + "");
                                        string error;
                                        bool success = rc.SetPreference("proxy", dict, out error);
                                    });
                                    for (int i = 0; i < activeProxy.Items.Count; i++)
                                    {
                                        PROXYACTIVITY px = (PROXYACTIVITY)activeProxy.Items[i];
                                        if (px.interfaceProxy == $"127.0.0.1:{settings.PrivoxySettings.Port.ToString()}")
                                            activeProxy.Items.RemoveAt(i);
                                    }
                                    SendTXTBoxMsg("Tor proxy has been stopped...");
                                    torSettingsTXT.AppendText($"TOR PROXY PROCESS STOPPED -- " +
                                        $"MODE TO DIRECT MODE {Environment.NewLine}");
                                }
                            }
                            else if (command[1].ToLower().StartsWith(" url") == true)
                            {
                                textBoxHistory.AddToHistory(command[1]);
                                if (args[2] == "--set" || args[2] == "-s")
                                {
                                    tBrowser.Address = args[3];
                                    SendTXTBoxMsg($"Url set to: {args[3]}");
                                    dt.Text = tBrowser.Address;
                                }
                            }
                            else if (command[1].ToLower().StartsWith(" identity"))
                            {
                                textBoxHistory.AddToHistory(command[1]);
                                if (args[2].ToLower() == "--id" || args[2] == "-i")
                                {
                                    SendTXTBoxMsg((httpClient != null) ? "Current IP: " + await httpClient.GetStringAsync("http://api.ipify.org") :
                                        "Error: There was an error with parsing this command. Try connecting to the Tor proxy and try again...");
                                }
                                else if (args[2] == "--change")
                                {
                                    SendTXTBox("Changing identitiy... please wait...");
                                    await proxy.GetNewIdentityAsync();
                                    SendTXTBoxMsg("Success! Identity changed to: " + await httpClient.GetStringAsync("http://api.ipify.org"));
                                    Cef.GetGlobalCookieManager().DeleteCookies("", "");
                                }
                            }
                            else if (command[1].ToLower().StartsWith(" js") ||
                                command[1].ToLower().StartsWith(" javascript"))
                            {
                                if (tBrowser.CanExecuteJavascriptInMainFrame)
                                {
                                    switch (args[2]){
                                        case "-i":
                                        case "--invoke":
                                            string df = "";
                                            for (int i = 3; i < args.Length - 1; i++)
                                                df += args[i] + " ";
                                            df += args[args.Length - 1];
                                            JavascriptResponse rsp = await tBrowser.EvaluateScriptAsync(df);
                                            if (rsp.Result != null) SendTXTBoxMsg(rsp.Result.ToString());
                                            else{
                                                TextBoxMessage bx = new TextBoxMessage(torConsole);
                                                bx.EmptyEntry();
                                            }
                                            break;
                                        case "--run":
                                            JavascriptResponse rspR = await tBrowser.EvaluateScriptAsync(jsInput.Text);
                                            if (rspR.Result != null)
                                                Dispatcher.Invoke(DispatcherPriority.Background,
                                                    new Action(() => SendTXTBoxMsg(rspR.Result.ToString())));
                                            else{
                                                TextBoxMessage bx = new TextBoxMessage(torConsole);
                                                bx.EmptyEntry();
                                            }
                                            break;
                                    }
                                }
                                else
                                    SendTXTBoxMsg("Error: There was an error with the JS browser");
                            }
                            else if (command[1].ToLower().StartsWith(" interceptproxy"))
                            {
                                textBoxHistory.AddToHistory(command[1]);
                                if (args[2].ToLower() == "--start")
                                {
                                    InterceptHTTP();
                                    SendTXTBoxMsg("Successfully set up the intercept proxy...");
                                }
                                else if (args[2].ToLower() == "--stop")
                                {
                                    StopInterceptProxy();
                                    SendTXTBoxMsg("Stopped intercept proxy...");
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        SendTXTBoxMsg(ex.Message);
                    }
                }
                else if (e.Key == Key.F1)
                    textBoxHistory.TraverseUp(torConsole, ">");
                else if (e.Key == Key.F2)
                    textBoxHistory.TraverseDown(torConsole, ">");
            }
            catch
            {

            }
        }
        private void goBack_Click(object sender, RoutedEventArgs e)
        {
            tBrowser.Back();
        }
        private void goForward_Click(object sender, RoutedEventArgs e)
        {
            tBrowser.Forward();
        }
        private void dt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                if (dt.Text.Contains("."))
                    tBrowser.Address = dt.Text;
                else
                    tBrowser.Address = "https://duckduckgo.com/?q=" + dt.Text;
            }
        }
        private void tBrowser_LoadError(object sender, LoadErrorEventArgs e)
        {
            int errProtocol = Math.Abs((int)e.ErrorCode);
            tBrowser.LoadHtml(@"<html>
<title>Error</title>
<style>
        body {
                background-color: black;
            }
#main_style {
        color: rgb(0, 231, 50);
            font-family: 'Consolas','monaco',monospace;
            text-align: center;
        }
        .line-1{
            position: relative;
            top: 20%;  
            width: 24em;
            margin: 0 auto;
            border-right: 2px solid rgba(255,255,255,.75);
        font-size: 180%;
            text-align: center;
            white-space: nowrap;
            overflow: hidden;
            transform: translateY(-50%);
        }
        .anim-typewriter{
                animation: typewriter 1s steps(14) 0.25s 1 normal both,
                 blinkTextCursor 500ms steps(44) infinite normal;
            }
@keyframes typewriter
{
    from { width: 0; }
    to { width: 5em; }
}
@keyframes blinkTextCursor
{
    from { border-right-color: rgba(0, 255, 21, 0.75); }
    to { border-right-color: transparent; }
}
</style>
<h1 id='main_style' class='anim-typewriter line-1'>Error " + errProtocol.ToString() + "</h1>" +
"<p id='main_style' style='margin-top: 15%;'>There was an error with loading the web page '"
+ e.FailedUrl + "'...</p>" +
"<p id='main_style' style='margin-top: 17%;'>Error info: "
+ e.ErrorText + "...</p></html>");
        }
        private void reloadPage_Click(object sender, RoutedEventArgs e)
        {
            tBrowser.Reload();
        }
        private void torConsole_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Up)
            {
                e.Handled = true;
                torConsole.CaretIndex = torConsole.Text.Length;
                textBoxHistory.TraverseUp(torConsole, ">");
                torConsole.ScrollToEnd();
            }
            if (e.Key == Key.Down)
            {
                e.Handled = true;
                torConsole.CaretIndex = torConsole.Text.Length;
                textBoxHistory.TraverseDown(torConsole, ">");
                torConsole.ScrollToEnd();
            }
        }
        public async void ConnecToProxy(string ipConnect, string portConnect,
            string serverMode)
        {
            await Cef.UIThreadTaskFactory.StartNew(delegate
            {
                string ip = ipConnect;
                string port = portConnect;
                var rc = this.tBrowser.GetBrowser().GetHost().RequestContext;
                var dict = new Dictionary<string, object>();
                dict.Add("mode", serverMode);
                dict.Add("server", "" + ip + ":" + port + "");
                string error;
                bool success = rc.SetPreference("proxy", dict, out error);
            });
        }
        [Obsolete]
        private async void InterceptHTTP()
        {
            proxyServer = new ProxyServer();
            proxyServer.ForwardToUpstreamGateway = true;
            var explicitEndPoint =
                new ExplicitProxyEndPoint(IPAddress.Parse("127.0.0.1"), 8000, true);
            proxyServer.AddEndPoint(explicitEndPoint);

            proxyServer.BeforeRequest += ProxyServer_BeforeRequest;
            proxyServer.BeforeResponse += ProxyServer_BeforeResponse;
            proxyServer.Start();

            await Cef.UIThreadTaskFactory.StartNew(delegate
            {
                string ip = explicitEndPoint.IpAddress.ToString();
                string port = explicitEndPoint.Port.ToString();
                IPIntercept = ip;
                PortIntercept = port;
                var rc = this.tBrowser.GetBrowser().GetHost().RequestContext;
                var dict = new Dictionary<string, object>();
                dict.Add("mode", "fixed_servers");
                dict.Add("server", "" + ip + ":" + port + "");
                string error;
                bool success = rc.SetPreference("proxy", dict, out error);
            });
            activeProxy.Items.Add(new PROXYACTIVITY()
            {
                interfaceProxy = $"{explicitEndPoint.IpAddress.ToString()}:{explicitEndPoint.Port.ToString()}",
                service = "Intercept",
                isRunning = "True",
                proxyInfo = $"Decrypt SSL: {explicitEndPoint.DecryptSsl}"
            });
        }

        [Obsolete]
        private async Task ProxyServer_BeforeResponse(object sender, SessionEventArgs e)
        {
            string resp = e.GetResponseBodyAsString().Result;
            await Task.Run(() =>
            {
                if (e.HttpClient.Response.HasBody)
                {
                    Dispatcher.Invoke(() =>
                    {
                        interceptResponse.AppendText(resp + Environment.NewLine);
                        interceptResponse.ScrollToEnd();

                        httpActivity.Items.Add(new HTTPACTIVITY
                        {
                            request = e.HttpClient.Request.ToString(),
                            payload = rqString ?? "",
                            response = e.GetResponseBodyAsString().Result,
                            time = DateTime.Now.ToString("h:mm:ss tt")
                        });
                    }
                    );
                }
            });
        }
        private async Task ProxyServer_BeforeRequest(object sender, SessionEventArgs e)
        {
            string resp = e.GetRequestBodyAsString().Result;
            await Task.Run(() =>
            {
                Dispatcher.Invoke(() =>
                {
                    tSettings.Clear();
                    tSettings.AppendText(e.HttpClient.Request.ToString() + resp);
                    tSettings.ScrollToEnd();
                    rqString = resp;
                    //httpActivity.Items.Add(new HTTPACTIVITY
                    //{
                    //    request = e.HttpClient.Request.ToString(),
                    //    payload = resp,
                    //    response = responseString ?? "",
                    //    time = DateTime.Now.ToString("h:mm:ss tt")
                    //});

                    //tSettings.AppendText(e.HttpClient.Response.ToString());
                });
            });
        }
        private void StopInterceptProxy()
        {
            try
            {
                proxyServer.Stop();
                ConnecToProxy(IPIntercept, PortIntercept, "direct");
                for (int i = 0; i < activeProxy.Items.Count; i++)
                {
                    PROXYACTIVITY px = activeProxy.Items[i] as PROXYACTIVITY;
                    if (px.interfaceProxy == $"{IPIntercept}:{PortIntercept}")
                        activeProxy.Items.RemoveAt(i);
                }
            }
            catch (Exception ex)
            {
                SendTXTBoxMsg($"Error: there was an error with stopping the proxy: {ex.Message}...");
            }
        }
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            isActivityShown = !isActivityShown;
            activityGrid.Width = isActivityShown ? new GridLength(1, GridUnitType.Star) :
                new GridLength(0);
            hideShowActivity.Content = isActivityShown ? "Hide Activity" : "Show activity";
        }
        private void tBrowser_TitleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            mainTabTitle.Header = e.NewValue.ToString();
        }
        private void saveHTTPRequest_Click(object sender, RoutedEventArgs e)
        {
            Microsoft.Win32.SaveFileDialog sv = new Microsoft.Win32.SaveFileDialog()
            {
                Filter = "All .http|*.http"
            };
            if (sv.ShowDialog() == true)
            {
                File.WriteAllText(sv.FileName, tSettings.Text);
                SendTXTBoxMsg($"Success! Saved file {sv.FileName}");
            }
        }
        public void Navigate(IWebBrowser browser)
        {
            IFrame frame = browser.GetMainFrame();
            IRequest request = frame.CreateRequest();

            //Obtain header details
            string[] url_H = tSettings.Text.Split('\n');

            request.Url = url_H[0].Split(' ')[1];
            request.Method = url_H[0].Split(' ')[0]; //POST, GET etc.

            request.InitializePostData();
            var element = request.PostData.CreatePostDataElement();
            element.Bytes = Encoding.ASCII.GetBytes(url_H[url_H.Length - 1].Replace("\r", ""));
            request.PostData.AddElement(element);

            System.Collections.Specialized.NameValueCollection headers =
                new System.Collections.Specialized.NameValueCollection();
            for (int i = 1; i < url_H.Length - 2; i++)
            {
                string[] hg = url_H[i].Split(':');
                string ass = "";
                for (int j = 1; j < hg.Length - 1; j++)
                    ass += $"{hg[j]}:";
                ass += hg[hg.Length - 1];
                headers.Add(hg[0], ass.TrimStart().Replace("\r", ""));
            }
            //headers.Add("Content-Type", contentType);
            request.Headers = headers;

            frame.LoadRequest(request);

            string script = string.Format("document.documentElement.outerHTML;");
            frame.EvaluateScriptAsync(script).ContinueWith(x =>
            {
                var response = x.Result;
                if (response.Success && response.Result != null)
                {
                    var fullhtml = response.Result;
                    Dispatcher.Invoke(() =>
                    interceptResponse.Text = fullhtml.ToString());
                }
            });
        }
        public void Navigate(IWebBrowser browser, string url, byte[] postDataBytes,
            string contentType, string referer, string METHOD)
        {
            IFrame frame = browser.GetMainFrame();
            IRequest request = frame.CreateRequest();

            request.Url = url;
            request.Method = METHOD; //POST, GET etc.

            request.InitializePostData();
            var element = request.PostData.CreatePostDataElement();
            element.Bytes = postDataBytes;
            request.PostData.AddElement(element);

            System.Collections.Specialized.NameValueCollection headers =
                new System.Collections.Specialized.NameValueCollection();
            headers.Add("Content-Type", contentType);
            headers.Add("Referer", referer);
            request.Headers = headers;

            frame.LoadRequest(request);

            string script = string.Format("document.documentElement.outerHTML;");
            frame.EvaluateScriptAsync(script).ContinueWith(x =>
            {
                var response = x.Result;
                if (response.Success && response.Result != null)
                {
                    var fullhtml = response.Result;
                    Dispatcher.Invoke(() =>
                    interceptResponse.Text = fullhtml.ToString());
                }
            });
        }
        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            Navigate(tBrowser);
        }
    }
    public class HTTPACTIVITY
    {
        public string response { get; set; }
        public string payload { get; set; }
        public string request { get; set; }
        public string time { get; set; }
    }
    public class PROXYACTIVITY
    {
        public string interfaceProxy { get; set; }
        public string service { get; set; }
        public string isRunning { get; set; }
        public string proxyInfo { get; set; }
    }
}
