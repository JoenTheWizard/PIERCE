using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using sqlmapsharp;

namespace mVPenTester
{
    /// <summary>
    /// Interaction logic for SqliWindow.xaml
    /// </summary>
    public partial class SqliWindow : Window
    {
        TextBoxHistory hist = new TextBoxHistory();
        public SqliWindow()
        {
            InitializeComponent();
            this.MaxHeight = SystemParameters.MaximizedPrimaryScreenHeight;
        }
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
        private void maximumMin_Click(object sender, RoutedEventArgs e)
        {
            WindowState = (WindowState == WindowState.Normal) ? WindowState = WindowState.Maximized : WindowState = WindowState.Normal;
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }
        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
                DragMove();
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            this.BorderThickness = (WindowState == WindowState.Maximized) ? this.BorderThickness = new System.Windows.Thickness(6)
               : this.BorderThickness = new System.Windows.Thickness(0);
            maximumMin.Content = (WindowState == WindowState.Normal) ? "🗖" : "⧉";
        }
        private void sqlURL_KeyDown(object sender, KeyEventArgs e)
        {
            string[] lines = sqlURL.Text.Split('\n');
            string lastLine = lines[lines.Length - 1];
            string[] command = lastLine.Split('>');
            try
            {
                string[] args = command[1].Split(' ');
                if (e.Key == Key.Enter)
                {
                    try
                    {
                        if (args.Length <= 2)
                        {
                            switch (command[1].ToLower())
                            {
                                case " help":
                                    SendTXTBoxMsg("===List of commands===");
                                    hist.AddToHistory(command[1]);
                                    break;
                            }
                        }
                        else
                        {
                            if (command[1].ToLower().StartsWith(" sql"))
                            {
                                hist.AddToHistory(command[1]);
                                Task.Run(() => CheckSQL(args[2]));
                            }
                            else if (command[1].ToLower().StartsWith(" get"))
                            {
                                hist.AddToHistory(command[1]);
                                Task.Run(() => SQLMap(args[2]));
                            }
                            else if (command[1].ToLower().StartsWith(" dbs"))
                            {
                                hist.AddToHistory(command[1]);
                                SqlmapDbs(args[2]);
                            }
                        }
                    }
                    catch (Exception et)
                    { SendTXTBoxMsg(et.ToString()); }
                }
                else if (e.Key == Key.F1)
                {
                    hist.TraverseUp(sqlURL, ">");
                }
                else if (e.Key == Key.F2)
                    hist.TraverseDown(sqlURL, ">");
            }
            catch { }
        }
        public void SendTXTBoxMsg(string msg)
        {
            sqlURL.Text = sqlURL.Text + Environment.NewLine;
            sqlURL.Text += "\r" + msg + "\r\n" + Environment.NewLine;
            sqlURL.Text += "> ";
            sqlURL.SelectionStart = sqlURL.Text.Length;
            sqlURL.SelectionLength = 0;
            sqlURL.ScrollToEnd();
        }
        public void SendTXTBox(string msg)
        {
            sqlURL.Text = sqlURL.Text;
            sqlURL.Text += "\r" + msg + Environment.NewLine;
            sqlURL.SelectionStart = sqlURL.Text.Length;
            sqlURL.SelectionLength = 0;
            sqlURL.ScrollToEnd();
        }
        private void CheckSQL(string url)
        {
            string mysqlifetch = "mysqli_fetch_array()";
            WebRequest request = WebRequest.Create(url + "'");
            WebResponse response = request.GetResponse();

            using (Stream dataStream = response.GetResponseStream())
            {
                StreamReader reader = new StreamReader(dataStream);
                string responseFromServer = reader.ReadToEnd();
                if (responseFromServer.ToLower().Contains("you have an error in your sql syntax") || responseFromServer.ToLower().Contains("warning: mysql_fetch_array()") || responseFromServer.ToLower().Contains(mysqlifetch))
                    Dispatcher.Invoke(() => SendTXTBoxMsg($"[+] Target {url} might be vulnerable! {Environment.NewLine}Vulnerable URL: {url}%27"));
                else
                    Dispatcher.Invoke(() => SendTXTBoxMsg($"[-] Target {url} is probably not vulnerable..."));
            }
        }
        private void SQLMap(string url)
        {
            using (SqlmapSession session = new SqlmapSession(url, 80))
            {
                Dispatcher.Invoke(() => SendTXTBoxMsg(session.ExecuteGet(url)));
            }
        }
        private async void SqlmapDbs(string url)
        {
            TextBoxMessage receive = new TextBoxMessage(sqlResult);
            await Task.Run(() =>
             {
                 Process cmd = new Process();
                 cmd.StartInfo.FileName = "cmd.exe";
                 cmd.StartInfo.RedirectStandardInput = true;
                 cmd.StartInfo.RedirectStandardOutput = true;
                 cmd.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                 cmd.StartInfo.CreateNoWindow = true;
                 cmd.StartInfo.UseShellExecute = false;
                 cmd.Start();
                 cmd.StandardInput.WriteLine($@"python sqlmap-master\sqlmap.py -u {url} --dbs");
                 cmd.StandardInput.Close();
                 while (!cmd.StandardOutput.EndOfStream)
                 {
                     Dispatcher.Invoke(() =>
                     {
                       receive.SendTextBox(cmd.StandardOutput.ReadLine());
                     });
                 }
                 cmd.WaitForExit();
             });
            SendTXTBoxMsg("=== Process ended === ");
        }
    }
}
